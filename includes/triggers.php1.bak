<?php
/**
 * This is where the magic happens!  Just need to call ExperienceAPI::register()
 */

/**
 * This trigger is for page views of various kinds
 */
WP_Experience_API::register( 'page_views', array(
	'hooks' => array( 'wp' ), //yes, kinda broad, but if singular, should be ok
	'process' => function( $hook, $args ) {
		global $post;

		//only track front end for now.
		if ( is_admin() ) {
			return true;
		}

		$options = get_option( 'wpxapi_settings' );
		if ( 3 == $options['wpxapi_pages'] ) {
			return false;
		}
		if ( 2 == $options['wpxapi_pages'] ) {
			if ( ! is_singular() ) {
				return false;
			}
		}

		//need to make sure that description is working.
		$description = get_bloginfo( 'description' );
		if ( empty( $description ) ) {
			$description = 'n/a';
		}

		$statement = null;
		$statement = array(
			'verb' => array(
				'id' => 'http://id.tincanapi.com/verb/viewed',
				'display' => array( 'en-US' => 'viewed' ),
			),
			'object' => array(
				'id' => WP_Experience_API::current_page_url(),
				'definition' => array(
					'name' => array(
						'en-US' => get_the_title( absint( $post->ID ) ) . ' | ' . get_bloginfo( 'name' ),
					),
					'description' => array(
						'en-US' => $description,
					),
					'type' => 'http://activitystrea.ms/schema/1.0/page',
				)
			),
			'context_raw' => array(
				'extensions' => array(
					'http://id.tincanapi.com/extension/browser-info' => array( 'user_agent' => $_SERVER['HTTP_USER_AGENT'] ),
					'http://id.tincanapi.com/extension/referrer' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '',
				),
				'platform' => defined( 'CTLT_PLATFORM' ) ? constant( 'CTLT_PLATFORM' ) : 'unknown'
			),
			'timestamp_raw' => date( 'c' )
		);

		$user = get_current_user_id();
		if ( empty( $user ) ) {
			if ( 1 == $options['wpxapi_guest'] ) {
				$user = array(
					'objectType' => 'Agent',
					'name' => 'Guest ' . $_SERVER['REMOTE_ADDR'],
					'mbox' => 'mailto:guest-' . $_SERVER['REMOTE_ADDR'] . '@' . preg_replace( '/http(s)?:\/\//', '', get_bloginfo( 'url' ) ),
				);
				$statement = array_merge( $statement, array( 'actor_raw' => $user ) );
			} else {
				return false;
			}
		} else {
			$statement = array_merge( $statement, array( 'user' => $user ) );
		}

		return $statement;
	}
));

/**
 * This trigger is for tracking video interactions of various kinds
 */
WP_Experience_API::register( 'video_inter', array(
	'hooks' => array( 'video_interactions' ), //yes, kinda broad, but if singular, should be ok
	'process' => function( $hook, $args ) {
		global $post;

		//only track front end for now.
		if ( is_admin() ) {
			return true;
		}

		//need to make sure that description is working.
		$description = get_bloginfo( 'description' );
		if ( empty( $description ) ) {
			$description = 'n/a';
		}

		(function (ADL) {

			var XAPIVideoJS = function (target, src, options) {
				var actor = JSON.parse(ADL.XAPIWrapper.lrs.actor);
		
				// Global Variables & common functions
				var myPlayer = videojs(target);
				var objectID = typeof activityId !== 'undefined' ? activityId : myPlayer.currentSrc().toString();
				var sessionID = ADL.ruuid();
				var started = false;
		
				// common math functions
				function formatFloat(number) {
					if (number == null)
						return null;
		
					return +(parseFloat(number).toFixed(3));
				}
				
				function add_registration_if_exists(statement) {
					if (typeof ADL.XAPIWrapper.lrs.registration == "string" && ADL.XAPIWrapper.lrs.registration.length == 36) {
					   // var registration = ADL.XAPIWrapper.lrs.registration;
					   if(typeof statement["context"] == undefined)
							statement["context"] = new Object();
		
						statement["context"]["registration"] = ADL.XAPIWrapper.lrs.registration;
					}
		
					return statement;
				}
		
				var terminate_player = false;
		
				function video_start() {
					started = true;
					var myparams = [];
					myparams['agent'] = JSON.stringify(actor);
					myparams['activity'] = objectID;
					myparams['verb'] = 'https://w3id.org/xapi/video/verbs/paused';
					myparams['limit'] = 1;
		
					if (typeof ADL.XAPIWrapper.lrs.registration == "string" && ADL.XAPIWrapper.lrs.registration.length == 36) {
		//                ADL.XAPIWrapper.log('yes there is a registration in xAPIWrapper');
						myparams['registration'] = ADL.XAPIWrapper.lrs.registration;
					}
					
					ret = ADL.XAPIWrapper.getStatements(myparams);
					if (ret != undefined &&
						ret.statements != undefined &&
						ret.statements[0] != undefined &&
						ret.statements[0]['result'] != undefined &&
						ret.statements[0]['result']['extensions'] != undefined &&
						ret.statements[0]['result']['extensions']['https://w3id.org/xapi/video/extensions/played-segments'] != undefined
					) {
						ADL.XAPIWrapper.log(played_segments);
						played_segments = ret.statements[0]['result']['extensions']['https://w3id.org/xapi/video/extensions/played-segments'];
						ADL.XAPIWrapper.log(played_segments);
					}
					if (ret != undefined &&
						ret.statements != undefined &&
						ret.statements[0] != undefined &&
						ret.statements[0]['result'] != undefined &&
						ret.statements[0]['result']['extensions'] != undefined &&
						ret.statements[0]['result']['extensions']['https://w3id.org/xapi/video/extensions/time'] != undefined
					) {
						var time = 1 * ret.statements[0]['result']['extensions']['https://w3id.org/xapi/video/extensions/time'];
						if (time > 0)
							myPlayer.currentTime(time);
						ADL.XAPIWrapper.log(time);
					}
					if (ret != undefined &&
						ret.statements != undefined &&
						ret.statements[0] != undefined &&
						ret.statements[0]['result'] != undefined &&
						ret.statements[0]['result']['extensions'] != undefined &&
						ret.statements[0]['result']['extensions']['https://w3id.org/xapi/video/extensions/progress'] != undefined
					) {
						var progress = 1 * ret.statements[0]['result']['extensions']['https://w3id.org/xapi/video/extensions/progress'];
						if (progress == 1)
						{
							completion_sent = true;
							ADL.XAPIWrapper.log(progress);
						}
					}
		
		
					send_initialized();
		
					window.addEventListener("beforeunload", function (e) {
						terminate_player = true;
						if (myPlayer.paused())
							TerminateMyPlayer();
						else
							myPlayer.pause();
					});
				}
		
				/***************************************************************************************/
				/***** VIDEO.JS Player xAPI Initialized Statement ********************/
				/*************************************************************************************/
		
				function send_initialized() {
					// get the current date and time and throw it into a variable for xAPI timestamp
					var dateTime = new Date();
					var timeStamp = dateTime.toISOString();
		
					// vet the video length
					var length = myPlayer.duration();
		
					// get user agent header string
					var userAgent = navigator.userAgent.toString();
		
					// prepare the xAPI initialized statement
					var initializedStmt = {
						"id": sessionID,
						"actor": actor,
						"verb": {
							"id": "http://adlnet.gov/expapi/verbs/initialized",
							"display": {
								"en-US": "initialized"
							}
						},
						"object": {
							"id": objectID,
							"definition": {
								"name": {
									"en-US": activityTitle
								},
								"description": {
									"en-US": activityDesc
								},
								"type": "https://w3id.org/xapi/video/activity-type/video"
							},
							"objectType": "Activity"
						},
						"context": {
							"contextActivities": {
								"category": [{
									"id": "https://w3id.org/xapi/video"
								}]
							},
							"extensions": {
								"https://w3id.org/xapi/video/extensions/completion-threshold": "1.0",
								"https://w3id.org/xapi/video/extensions/length": length,
								"https://w3id.org/xapi/video/extensions/user-agent": userAgent,
								"https://w3id.org/xapi/video/extensions/session-id": sessionID
		
							}
						},
						"timestamp": timeStamp
					};
		
					initializedStmt = add_registration_if_exists(initializedStmt);
					//send initialized statement to the LRS & show data in console
					ADL.XAPIWrapper.log("initialized statement sent");
					ADL.XAPIWrapper.sendStatement(initializedStmt, function (resp, obj) {
						ADL.XAPIWrapper.log("Response from LRS: " + resp.status + " - " + resp.statusText);
					});
					ADL.XAPIWrapper.log(initializedStmt);
				}
		
				/***************************************************************************************/
				/***** VIDEO.JS Played Event | xAPI Played Statement **********************************/
				/*************************************************************************************/
		
				myPlayer.on("play", function () {
					//	myPlayer.currentTime(20);
					if (started == false) {
						video_start();
					}
					
					// vet the video length
					var length = myPlayer.duration();
		
					// If user is seaking, skip the play event
					if (skipPlayEvent !== true) {
						seekStart = null; //reset seek if not reset
		
						// get the current date and time and throw it into a variable for xAPI timestamp
						var dateTime = new Date();
						var timeStamp = dateTime.toISOString();
		
						// get the current time position in the video
						var resultExtTime = fixed_play_time(formatFloat(myPlayer.currentTime()));
						start_played_segment(resultExtTime);
		
		
						var playedStmt = {
							"actor": actor,
							"verb": {
								"id": "https://w3id.org/xapi/video/verbs/played",
								"display": {
									"en-US": "played"
								}
							},
							"object": {
								"id": objectID,
								"definition": {
									"name": {
										"en-US": activityTitle
									},
									"description": {
										"en-US": activityDesc
									},
									"type": "https://w3id.org/xapi/video/activity-type/video"
								},
								"objectType": "Activity"
							},
							"result": {
								"extensions": {
									"https://w3id.org/xapi/video/extensions/time": resultExtTime,
								}
							},
							"context": {
								"contextActivities": {
									"category": [{
										"id": "https://w3id.org/xapi/video"
									}]
								},
								"extensions": {
									"https://w3id.org/xapi/video/extensions/length": length,
									"https://w3id.org/xapi/video/extensions/session-id": sessionID
		
								}
							},
							"timestamp": timeStamp
						};
		
						playedStmt = add_registration_if_exists(playedStmt);
						//send played statement to the LRS
						ADL.XAPIWrapper.log("played statement sent");
						ADL.XAPIWrapper.sendStatement(playedStmt, function (resp, obj) {
							ADL.XAPIWrapper.log("Response from LRS: " + resp.status + " - " + resp.statusText);
						});
						ADL.XAPIWrapper.log(playedStmt);
					} else {
						// Seek statement has been sent, resume play events
						skipPlayEvent = false;
						send_seeked();
					}
				});
		
				/***************************************************************************************/
				/***** VIDEO.JS Paused Event | xAPI Paused Statement **********************************/
				/*************************************************************************************/
		
				myPlayer.on("pause", function () {
					// If the user is seeking, do not send the pause event
					if (this.seeking() === false) {
						// get the current date and time and throw it into a variable for xAPI timestamp
						var dateTime = new Date();
						var timeStamp = dateTime.toISOString();
						
						// get the video length
						var length = myPlayer.duration();
		
						// get the current time position in the video
						var resultExtTime = formatFloat(myPlayer.currentTime());
						end_played_segment(resultExtTime);
		
						// get the progress percentage and put it in a variable called progress
						var progress = get_progress();
						ADL.XAPIWrapper.log("video progress percentage:" + progress + ".");
					
		
						if (progress >= 1) {
							send_completed();
		
						}
							var pausedStmt = {
								"actor": actor,
								"verb": {
									"id": "https://w3id.org/xapi/video/verbs/paused",
									"display": {
										"en-US": "paused"
									}
								},
								"object": {
									"id": objectID,
									"definition": {
										"name": {
											"en-US": activityTitle
										},
										"description": {
											"en-US": activityDesc
										},
										"type": "https://w3id.org/xapi/video/activity-type/video"
									},
									"objectType": "Activity"
								},
								"result": {
									"extensions": {
										"https://w3id.org/xapi/video/extensions/time": resultExtTime,
										"https://w3id.org/xapi/video/extensions/progress": progress,
										"https://w3id.org/xapi/video/extensions/played-segments": played_segments
									}
								},
								"context": {
									"contextActivities": {
										"category": [{
											"id": "https://w3id.org/xapi/video"
										}]
									},
									"extensions": {
										"https://w3id.org/xapi/video/extensions/length": length,
										"https://w3id.org/xapi/video/extensions/session-id": sessionID
		
									}
								},
								"timestamp": timeStamp
							};
		
							pausedStmt = add_registration_if_exists(pausedStmt);
							//send paused statement to the LRS
							ADL.XAPIWrapper.log("paused statement sent");
							ADL.XAPIWrapper.sendStatement(pausedStmt, function (resp, obj) {
								ADL.XAPIWrapper.log("Response from LRS: " + resp.status + " - " + resp.statusText);
							});
							ADL.XAPIWrapper.log(pausedStmt);
					  
						if (terminate_player)
							TerminateMyPlayer();
					} else {
						//skip subsequent play Event
						skipPlayEvent = true;
					}
		
				});
		
		
				/***************************************************************************************/
				/***** VIDEO.JS Video Completion | xAPI Completed Statement **********************************/
				/*************************************************************************************/
				var next_completion_check = 0;
				var completion_sent = false;
				function check_completion() {
					if(completion_sent)
					{
						ADL.XAPIWrapper.log("completed statement already sent");
						return;
					}
		
					var currentTimestamp = (new Date()).getTime();
		
					if (currentTimestamp < next_completion_check) {
						//ADL.XAPIWrapper.log(new Date(next_completion_check) + " in " + (next_completion_check - currentTimestamp)/1000 + " seconds");
						return;
					}
					var length = myPlayer.duration();
					ADL.XAPIWrapper.log("length: " + length);
					if (length <= 0)
						return;
		
					var progress = get_progress();
		
					var remaining_seconds = (1 - progress) * length;
					//ADL.XAPIWrapper.log("remaining_seconds: " + remaining_seconds);
					next_completion_check = currentTimestamp + remaining_seconds.toFixed(3) * 1000;
					ADL.XAPIWrapper.log("Progress: " + progress + " currentTimestamp: " + currentTimestamp + " next completion check in " + (next_completion_check - currentTimestamp) / 1000 + " seconds");
			   
				}
		
				function send_completed() {
					if(completion_sent)
					{
						ADL.XAPIWrapper.log("completed statement already sent");
						return;
					}
					// get the current date and time and throw it into a variable for xAPI timestamp
					var dateTime = new Date();
					var timeStamp = dateTime.toISOString();
					
					var length = myPlayer.duration();
		
					// get the progress percentage and put it in a variable called progress
					var progress = get_progress();
					ADL.XAPIWrapper.log("video progress percentage:" + progress + ".");
		
					var duration = calculate_duration();
					duration = "PT" + formatFloat(duration).toFixed(2) + "S";
		
					var completedStmt = {
						"actor": actor,
						"verb": {
							"id": "http://adlnet.gov/expapi/verbs/completed",
							"display": {
								"en-US": "completed"
							}
						},
						"object": {
							"id": objectID,
							"definition": {
								"name": {
									"en-US": activityTitle
								},
								"description": {
									"en-US": activityDesc
								},
								"type": "https://w3id.org/xapi/video/activity-type/video"
							},
							"objectType": "Activity"
						},
						"result": {
							"duration": duration,
							"completion": true,
							"extensions": {
								"https://w3id.org/xapi/video/extensions/time": currentTime,
								"https://w3id.org/xapi/video/extensions/progress": progress,
								"https://w3id.org/xapi/video/extensions/played-segments": played_segments
							}
						},
						"context": {
							"contextActivities": {
								"category": [{
									"id": "https://w3id.org/xapi/video"
								}]
							},
							"extensions": {
								"https://w3id.org/xapi/video/extensions/session-id": sessionID,
								"https://w3id.org/xapi/video/extensions/length": length,
								"https://w3id.org/xapi/video/extensions/completion-threshold": "1.0"
								
		
							}
						},
						"timestamp": timeStamp
					};
		
					completedStmt = add_registration_if_exists(completedStmt);
					//send completed statement to the LRS
					ADL.XAPIWrapper.log("completed statement sent");
					ADL.XAPIWrapper.sendStatement(completedStmt, function (resp, obj) {
						ADL.XAPIWrapper.log("Response from LRS: " + resp.status + " - " + resp.statusText);
					});
					completion_sent = true;
					ADL.XAPIWrapper.log(completedStmt);
					// create a modal window for the user to terminate the session and dispose of the player
					terminateModal();
				}
		
				/***************************************************************************************/
				/***** VIDEO.JS Modal Close Event | xAPI Terminated Statement ************************/
				/*************************************************************************************/
		
				function terminateModal() {
		
					var modal = myPlayer.createModal('The video has ended. Click the close button to exit.');
					modal.on('modalclose', function () {
						TerminateMyPlayer();
					});
		
				}
		
		
				function TerminateMyPlayer() {
		
					// get the current date and time and throw it into a variable for xAPI timestamp
					var dateTime = new Date();
					var timeStamp = dateTime.toISOString();
		
					// get the progress percentage and put it in a variable called progress
					var progress = get_progress();
					ADL.XAPIWrapper.log("video progress percentage:" + progress + ".");
					
					var length = myPlayer.duration();
		
					var terminatedStmt = {
						"actor": actor,
						"verb": {
							"id": "http://adlnet.gov/expapi/verbs/terminated",
							"display": {
								"en-US": "terminated"
							}
						},
						"object": {
							"id": objectID,
							"definition": {
								"name": {
									"en-US": activityTitle
								},
								"description": {
									"en-US": activityDesc
								},
								"type": "https://w3id.org/xapi/video/activity-type/video"
							},
							"objectType": "Activity"
						},
						"result": {
							"extensions": {
								"https://w3id.org/xapi/video/extensions/time": currentTime,
								"https://w3id.org/xapi/video/extensions/progress": progress,
								"https://w3id.org/xapi/video/extensions/played-segments": played_segments
							}
						},
						"context": {
							"contextActivities": {
								"category": [{
									"id": "https://w3id.org/xapi/video"
								}]
							},
							"extensions": {
								"https://w3id.org/xapi/video/extensions/length": length,
								"https://w3id.org/xapi/video/extensions/session-id": sessionID,
								"https://w3id.org/xapi/video/extensions/completion-threshold": "1.0"
		
							}
						},
						"timestamp": timeStamp
					};
		
					terminatedStmt = add_registration_if_exists(terminatedStmt);
					//send completed statement to the LRS
					ADL.XAPIWrapper.log("terminated statement sent");
					ADL.XAPIWrapper.sendStatement(terminatedStmt, function (resp, obj) {
						ADL.XAPIWrapper.log("Response from LRS: " + resp.status + " - " + resp.statusText);
					});
					ADL.XAPIWrapper.log(terminatedStmt);
					myPlayer.dispose();
				};
		
			ADL.XAPIVideoJS = XAPIVideoJS;
		}(window.ADL = window.ADL || {}) } );

		$statement = null;
		$statement = array(
			'verb' => array(
				'id' => 'http://id.tincanapi.com/verb/Paused',
				'display' => array( 'en-US' => 'Paused' ),
			),
			'object' => array(
				'id' => WP_Experience_API::current_page_url(),
				'definition' => array(
					'name' => array(
						'en-US' => get_the_title( absint( $post->ID ) ) . ' | ' . get_bloginfo( 'name' ),
					),
					'description' => array(
						'en-US' => $description,
					),
					'type' => 'http://activitystrea.ms/schema/1.0/page',
				)
			),
			'context_raw' => array(
				'extensions' => array(
					'http://id.tincanapi.com/extension/browser-info' => array( 'user_agent' => $_SERVER['HTTP_USER_AGENT'] ),
					'http://id.tincanapi.com/extension/referrer' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '',
				),
				'platform' => defined( 'CTLT_PLATFORM' ) ? constant( 'CTLT_PLATFORM' ) : 'unknown'
			),
			'timestamp_raw' => date( 'c' )
		);

		$user = get_current_user_id();
		if ( empty( $user ) ) {
			if ( 1 == $options['wpxapi_guest'] ) {
				$user = array(
					'objectType' => 'Agent',
					'name' => 'Guest ' . $_SERVER['REMOTE_ADDR'],
					'mbox' => 'mailto:guest-' . $_SERVER['REMOTE_ADDR'] . '@' . preg_replace( '/http(s)?:\/\//', '', get_bloginfo( 'url' ) ),
				);
				$statement = array_merge( $statement, array( 'actor_raw' => $user ) );
			} else {
				return false;
			}
		} else {
			$statement = array_merge( $statement, array( 'user' => $user ) );
		}

		return $statement;
	}
));

/**
 * This trigger is to track some specific post transitions (going to published, trashed, etc)
 */
WP_Experience_API::register( 'transition_post', array(
	'hooks' => array( 'transition_post_status' ),
	'num_args' => array( 'transition_post_status' => 3 ),
	'process' => function( $hook, $args ) {  //args in this case should be ($new_status, $old_status, $post)
		global $post;

		$current_post = null;
		$switched_post = false; //so we can keep track if we switched posts
		//put verb here cause we have to account for multiple possible verbs (trashed/authored for now)
		$verb = array( 'id' => 'http://activitystrea.ms/schema/1.0/author', 'display' => array( 'en-US' => 'authored' ) );

		//switch to post passed in via args vs global one as it's old and we are updating posts
		if ( isset( $args[2] ) && ! empty( $args[2] ) && $args[2] instanceof WP_Post ) {
			$current_post =  $args[2];
		} else {
			$current_post = $post;
		}

		//check site level settings for what to watch 3: nothing, 2: only to published, 1: to published and deleted
		$options = get_option( 'wpxapi_settings' );
		if ( 5 == $options['wpxapi_publish'] ) {
			return false;
		}

		//currently, it defaults to working with only public post_types
		$post_type_obj = get_post_type_object( $post->post_type );
		if ( ! empty( $post_type_obj ) && property_exists( $post_type_obj, 'public' ) && $post_type_obj->public != 1 ) {
			return false;
		}

		if ( 4 == $options['wpxapi_publish'] ) {
			if (
				( isset( $args[0] ) && 'publish' == $args[0] ) && ( isset( $args[1] ) && 'publish' != $args[1] ) && //if going from anything (excluding publish) to publish state
				( isset( $args[2] ) && $args[2] instanceof WP_Post ) //if post exists
			) {
				//do nothing as this should ONLY take going to published to send to xAPI statement
			} else {
				return false;
			}
		}

		if ( 3 == $options['wpxapi_publish'] ) {
			if (
				( ( ( isset( $args[0] ) && 'publish' == $args[0] ) && ( isset( $args[1] ) && 'publish' != $args[1] ) ) || //if going from anything (excluding publish) to publish state
				( ( isset( $args[0] ) && 'trash' == $args[0] ) && ( isset( $args[1] ) && 'trash' != $args[1] ) ) ) && //if going from anything (excluding rash) to trash state
				( isset( $args[2] ) && $args[2] instanceof WP_Post ) //if post exists
			) {
				if ( 'trash' == $args[0] ) {
					$verb = array( 'id' => 'http://activitystrea.ms/schema/1.0/delete', 'display' => array( 'en-US' => 'deleted' ) );
				}
			} else {
				return false;
			}
		}

		if ( 2 == $options['wpxapi_publish'] ) {
			if (
				( ( isset( $args[0] ) && 'publish' == $args[0] ) || //include state changes from anything to published state, including published to published
				( ( isset( $args[0] ) && 'trash' == $args[0] ) && ( isset( $args[1] ) && 'trash' != $args[1] ) ) ) && //if going from anything (excluding rash) to trash state
				( isset( $args[2] ) && $args[2] instanceof WP_Post ) //if post exists
			) {
				if ( 'trash' == $args[0] ) {
					$verb = array( 'id' => 'http://activitystrea.ms/schema/1.0/delete', 'display' => array( 'en-US' => 'deleted' ) );
				} else if ( 'publish' == $args[0] && 'publish' == $args[1] ) {
					$verb = array( 'id' => 'http://activitystrea.ms/schema/1.0/update', 'display' => array( 'en-US' => 'updated' ) );
				}
			} else {
				return false;
			}
		}

		//capture almost anything
		if ( 1 == $options['wpxapi_publish'] ) {
			if (
				( isset( $args[2] ) && $args[2] instanceof WP_Post ) //if post exists
			) {
				if ( 'trash' == $args[0] ) {
					//if going to trash (aka new state is trash
					$verb = array( 'id' => 'http://activitystrea.ms/schema/1.0/delete', 'display' => array( 'en-US' => 'deleted' ) );
				} else if ( 'publish' == $args[0] && 'publish' == $args[1] ) {
					//if going from published to published
					$verb = array( 'id' => 'http://activitystrea.ms/schema/1.0/update', 'display' => array( 'en-US' => 'updated' ) );
				} else if ( 'publish' == $args[1] && 'publish' != $args[0] ) {
					//if going from published to something OTHER than published (aka retracted)
					$verb = array( 'id' => 'http://activitystrea.ms/schema/1.0/retract', 'display' => array( 'en-US' => 'retracted' ) );
				} else if ( 'publish' == $args[0] && 'publish' != $args[1] ) {
					//do nothing as the $verb variable is already set and initialized to authored.
				} else {
					//we matched everything we cared about so we just return false for the rest
					return false;
				}
			} else {
				return false;
			}
		}

		$statement = null;
		$statement = array(
			'user' => get_current_user_id(),
			'verb' => array(
				'id' => $verb['id'],
				'display' => $verb['display'],
			),
			'object' => array(
				'id' => get_permalink( $current_post->ID ),
				'definition' => array(
					'name' => array(
						'en-US' => (string) $current_post->post_title . ' | ' . get_bloginfo( 'name' ),
					),
					'type' => 'http://activitystrea.ms/schema/1.0/page',
				)
			),
			'context_raw' => array(
				'extensions' => array(
					'http://id.tincanapi.com/extension/browser-info' => array( 'user_agent' => $_SERVER['HTTP_USER_AGENT'] ),
					'http://id.tincanapi.com/extension/referrer' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : '',
				),
				'platform' => defined( 'CTLT_PLATFORM' ) ? constant( 'CTLT_PLATFORM' ) : 'unknown'
			),
			'timestamp_raw' => date( 'c' )
		);

		//now get description and insert if there is something
		$description = '';
		if ( ! empty( $current_post->post_excerpt ) ) {
			$description = $current_post->post_excerpt;
		} else if ( ! empty( $current_post->post_content ) ) {
			$description = $current_post->post_content;
		}
		if ( ! empty( $description ) ) {
			$statement['object']['definition']['description'] = array( 'en-US' => $description );
		}
		$result = $current_post->post_content;
		if ( ! empty( $result ) ) {
			$statement['result_raw']['response']= $result;
		}

		return $statement;
	}
));